if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	# WIN32 is TRUE on Windows, including Cygwin
	if(WIN32)
		if(UNIX)
			message(WARNING "OS indentified as both Windows and Unix (Maybe Cygwin?). Not using prebuilt libraries.")
			set(OS_REALLY_UNKNOWN TRUE)
		else()
			message(STATUS "OS indentified as Windows. Will attempt to use prebuilt libraries.")
			set(OS_REALLY_WINDOWS TRUE)
		endif()
	else()
		message(WARNING "OS indentified as Windows, but WIN32 macro not set. Not using prebuilt libraries.")
		set(OS_REALLY_UNKNOWN TRUE)
	endif ()
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	# UNIX is TRUE on all UNIX-like OS's, including Apple OS X and Cygwin.	
	if(UNIX)
		message(STATUS "OS indentified as Linux. Will attempt to use prebuilt libraries.")
		set(OS_REALLY_LINUX TRUE)
	else()
		message(WARNING "OS indentified as Linux, but UNIX macro not set. Not using prebuilt libraries.")
		set(OS_REALLY_UNKNOWN TRUE)
	endif ()	
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin" OR ${CMAKE_SYSTEM_NAME} MATCHES "MacOS")
	# APPLE is TRUE on Apple systems and systems that have __APPLE__ macro defined
	if(APPLE)
		message(STATUS "OS indentified as MacOS/Darwin. Will attempt to use prebuilt libraries.")
		set(OS_REALLY_APPLE TRUE)
	else()
		message(WARNING "OS indentified as MacOS/Darwin, but APPLE macro not set. Not using prebuilt libraries.")
		set(OS_REALLY_UNKNOWN TRUE)
	endif ()
else()
	message(WARNING "OS is other than Windows, Linux, or MacOS and has not been tested. Not using prebuilt libraries.")
	set(OS_REALLY_UNKNOWN TRUE)
endif()

if(CMAKE_SIZEOF_VOID_P STREQUAL "8")
    set(ARCHITECTURE_64BIT)
else ()
    set(ARCHITECTURE_32BIT)
endif()