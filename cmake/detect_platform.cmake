
# Detect target OS
if(CMAKE_SYSTEM_NAME MATCHES "Windows")
	# WIN32 is TRUE on Windows, including Cygwin
	if(WIN32)
		if(UNIX)
			message(WARNING "OS identified as both Windows and Unix (Maybe Cygwin/MinGW?).")
		else()
			message(STATUS "OS identified as Windows.")
			set(CMAKE_OS WINDOWS)
		endif()
	else()
		message(WARNING "OS identified as Windows, but WIN32 macro not set.")
	endif ()
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
	# UNIX is TRUE on all UNIX-like OS's, including Apple OS X and Cygwin.	
	if(UNIX)
		if(NOT ANDROID)
			message(STATUS "OS identified as Linux.")
			set(CMAKE_OS LINUX)
		else()
			message(WARNING "OS identified as Linux, but ANDROID macro set.")
		endif()
	else()
		message(WARNING "OS identified as Linux, but UNIX macro not set.")
	endif ()	
elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin" OR CMAKE_SYSTEM_NAME MATCHES "MacOS")
	# APPLE is TRUE on Apple systems and systems that have __APPLE__ macro defined
	if(APPLE)
		message(STATUS "OS indentified as MacOS/Darwin.")
		set(CMAKE_OS MACOS)
	else()
		message(WARNING "OS indentified as MacOS/Darwin, but APPLE macro not set.")
	endif ()
elseif(CMAKE_SYSTEM_NAME MATCHES "Android")
	if(ANDROID)
		message(STATUS "OS indentified as Android.")
		message(FATAL_ERROR "Android compilation not yet supported.")
		set(CMAKE_OS ANDROID)
	else()
		message(WARNING "OS indentified as Android, but ANDROID macro is not set.")
	endif ()
elseif(CMAKE_SYSTEM_NAME MATCHES "iOS")
	if(IOS)
		message(STATUS "OS indentified as iOS.")
		message(FATAL_ERROR "iOS compilation not yet supported.")
		set(CMAKE_OS IOS)
	else()
		message(WARNING "OS indentified as iOS, but IOS macro is not set.")
	endif ()
else()
	message(WARNING "OS is other than Windows, Linux, MacOS, Android, or iOS.")
endif()

if(CMAKE_OS)
	# CMAKE_OS must match a supported option in Utilogeny's platform OS enum (currently linux, windows, or macos)
	add_compile_definitions(OS_${CMAKE_OS})
else()
	message(FATAL_ERROR "Unsupported OS.")
endif()

# Detect 32-bit or 64-bit
if(CMAKE_SIZEOF_VOID_P STREQUAL "8")
	message(STATUS "Configuring for 64-bit architecture")
	add_compile_definitions(PLATFORM_64BIT)
else ()
	message(FATAL_ERROR "32-bit memory architecture no longer supported.")
endif()

# Detect compiler
message(STATUS "Configuring for compiler: ${CMAKE_CXX_COMPILER_ID} (version ${CMAKE_CXX_COMPILER_VERSION})")

# Is Clang
if(CMAKE_CXX_COMPILER_ID MATCHES "AppleClang")
	set(PLATFORM_COMPILER "CLANG")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "ARMClang")
	set(PLATFORM_COMPILER "CLANG")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
	set(PLATFORM_COMPILER "CLANG")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "XLClang")
	set(PLATFORM_COMPILER "CLANG")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "IntelLLVM")
	set(PLATFORM_COMPILER "LLVM")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
	set(PLATFORM_COMPILER "MSVC")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
	set(PLATFORM_COMPILER "GCC")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Intel")
	set(PLATFORM_COMPILER "INTEL")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Emscripten")
	set(PLATFORM_COMPILER "EMSCRIPTEN")
elseif(CMAKE_CXX_COMPILER_ID MATCHES "emscripten")
	set(PLATFORM_COMPILER "EMSCRIPTEN")
else()
	message(WARNING "Unrecognized compiler: ${CMAKE_CXX_COMPILER_ID}")
endif()

# Uses LLVM (Clang and IntelLLVM at least)
if(PLATFORM_COMPILER MATCHES "CLANG")
	set(PLATFORM_COMPILER_LLVM)
	add_compile_definitions(COMPILER_LLVM)
	message(STATUS "Added COMPILER_LLVM compiler definition")
endif()

add_compile_definitions(COMPILER_${PLATFORM_COMPILER})
	message(STATUS "Added COMPILER_${PLATFORM_COMPILER} compiler definition")